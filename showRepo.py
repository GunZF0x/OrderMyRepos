#/usr/bin/python3

from tabulate import tabulate
import argparse
import sys
import shutil
import textwrap
from pathlib import Path
import csv

# ANSI escape codes dictionary
colors = {
        "BLACK": '\033[30m',
        "RED": '\033[31m',
        "GREEN": '\033[32m',
        "BROWN": '\033[33m',
        "BLUE": '\033[34m',
        "PURPLE": '\033[35m',
        "CYAN": '\033[36m',
        "WHITE": '\033[37m',
        "GRAY": '\033[1;30m',
        "L_RED": '\033[1;31m',
        "L_GREEN": '\033[1;32m',
        "YELLOW": '\033[1;33m',
        "L_BLUE": '\033[1;34m',
        "PINK": '\033[1;35m',
        "L_CYAN": '\033[1;36m',
        "NC": '\033[0m'
        }

# Define a simple character to print steps
sb: str = f'{colors["L_CYAN"]}[*]{colors["NC"]}'
whitespaces: str = " "*(len('[*]')+1)
warning: str = f'{colors["YELLOW"]}[{colors["RED"]}!{colors["YELLOW"]}]{colors["NC"]}'

def parse_args() -> argparse.Namespace:
    """
    Simple function to get flags given by the user
    """
    # Create an ArgumentParser object
    parser = argparse.ArgumentParser()

    # Add an argument called "--flag" with action "store_true"
    parser.add_argument("-f", "--filename", type=str, default = "repositories.txt",
                    help="Filename containing repositories to display; usually the file generated by addRepo.py. Default: ./repositories.txt")
    parser.add_argument("-tf", "--table-format", type=str, default="grid",
                        help="Table format output. Check 'Table format' section at https://pypi.org/project/tabulate/ to see all options available. To avoid bugs, for some formats it is necessary to additionally use '--no-color' flag")
    parser.add_argument("--no-color", action="store_true",
                        help="Do not display the table with colors")

    # Parse the command-line arguments
    args = parser.parse_args(sys.argv[1:])

    return args


def create_table_elements(flags_var, width_terminal):
    """
    Creates items that will be stored inside 'tabulate' object
    """
    # Headers for the table
    headers_table = ["Repository Name", "OS", "Language", "Description"]
    # Body (data) for the table (allocated in "repositories.txt" or file given by '-f' flag)
    rows_table = read_columns_in_repository_file(flags_var)
    # Since we do not want to print all the data, select only the columns we will use
    printable_data_rows_table = [[item for item in sublist[1:]] for sublist in rows_table]

    # Get the max length (the sum of them) for columns that are not the "Description column"
    max_length = 0
    for col in printable_data_rows_table:
        new_length = len(col[0]) + len(col[1]) + len(col[2]) + 12 # '12' considering symbols and spaces
        if new_length > max_length:
            max_length = new_length

    max_allowed_length = width_terminal - max_length - 10

    if flags_var.no_color:
        #headers_table = original_header
        print("No color")
        return headers_table, printable_data_rows_table, max_allowed_length
    else:
        colors_headers_table = [f"{colors['L_CYAN']}Repo Name{colors['NC']}",
                         f"{colors['PINK']}OS{colors['NC']}",
                         f"{colors['L_RED']}Language{colors['NC']}",
                         f"{colors['L_GREEN']}Description{colors['NC']}"]
        # Create a table containing ANSI escape codes so it will print in colors
        colors_row_table = []
        for row in printable_data_rows_table:
            color_column = []
            # 'Repo Name' column
            color_column.append(f"{colors['CYAN']}{row[0]}{colors['NC']}")
            # 'Operating System (OS)' column
            color_column.append(f"{colors['PURPLE']}{row[1]}{colors['NC']}")
            # 'Language' column
            color_column.append(f"{colors['RED']}{row[2]}{colors['NC']}")
            # 'Description' column
            color_column.append(f"{colors['GREEN']}{row[3]}{colors['NC']}")
            colors_row_table.append(color_column)

        return colors_headers_table, colors_row_table, max_allowed_length


def read_columns_in_repository_file(flag_var):
    """
    Read the repositories file where the separator is "--"
    """
    rows = []
    with open(flag_var.filename, "r") as file:
        for line in file:
            col = []
            row = line.strip().split("--")
            for column in row:
                col.append(column.strip())
            rows.append(col)
    print()
    if flag_var.no_color:
        print(f"[*] Total number of repositories: {len(rows)}")
    else:
        print(f"{sb} Total number of repositories: {len(rows)}")
    return rows

def check_file_to_read(flags_var) -> None:
    """
    Check if the file that stores all the repositories exists
    """

    # Get the path where the script is being executed (current path, not where the script is stored)
    file_to_read = Path.cwd().joinpath(flags_var.filename)

    # Get file path
    file_path = Path(file_to_read)

    # Check if the file containing the repositories exists
    if not file_path.exists():
        if not flags_var.no_color:
            print(f"{warning} {colors['RED']}Warning!{colors['NC']} '{file_to_read}' does not exist. Try using 'addRepo.py' to create a file and retry")
        else:
            print(f"[+] Warning: '{file_to_read}' does not exist. Try using 'addRepo.py' to create a file and retry")
        sys.exit(1)

    return None


def main():
    """MAIN"""
    # Get the flags from the user input
    flags = parse_args()
    # Check if the file that contains the repositories data exists (if not, exits)
    check_file_to_read(flags)
    # Define the headers for the table
    width = shutil.get_terminal_size()[0]
    headers_table, body_table,max_allowed_length = create_table_elements(flags, width)

    # Print the table
    print()
    print(tabulate(body_table, headers=headers_table, tablefmt=flags.table_format, 
          maxcolwidths=[None, None, None, max_allowed_length]))



if __name__ == "__main__":
        main()

